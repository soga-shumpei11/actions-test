name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on:
  push:
    paths:
      - 'xxx/*/version.json'
jobs:
  detect-changed-environments:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changed-env.outputs.matrix }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.2.2
      - name: Get list of changed files
        run: |
          git fetch origin ${{ github.event.before }} --depth=1
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
          cat changed_files.txt
      - name: Determine changed environments
        id: changed-env
        run: |
          # Áπ∞„ÇäËøî„ÅóÂá¶ÁêÜ„ÅßÁí∞Â¢É„ÇíÂèñÂæó
          ENVIRONMENTS=()
          while read file; do
            case "$file" in
              'xxx/dev/version.json')
                ENVIRONMENTS+=("dev")
                ;;
              'xxx/stg/version.json')
                ENVIRONMENTS+=("stg")
                ;;
              'xxx/prd/version.json')
                ENVIRONMENTS+=("prd")
                ;;
            esac
          done < changed_files.txt
          # Áí∞Â¢É„ÅåÂ§âÊõ¥„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÁ©∫„ÅÆÈÖçÂàó„ÇíÂá∫Âäõ
          if [ ${#ENVIRONMENTS[@]} -eq 0 ]; then
            echo "No environments changed."
            echo '{"include":[]}' > matrix.json
          else
            printf -v envs '%s,' "${ENVIRONMENTS[@]}"
            envs_json=$(printf '["%s"]' "${envs%,}")
            echo "{\"environment\": $envs_json}" > matrix.json
          fi
          cat matrix.json
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT
  job2:
    runs-on: ubuntu-latest
    needs: detect-changed-environments
    steps:
      - env: 
        OUTPUT1: ${{needs.detect-changed-environments.outputs.matrix}}
      - name: Get list of changed files
        run: |
          echo "$OUTPUT1"
  # job1:
  #   runs-on: ubuntu-latest
  #   # Map a step output to a job output
  #   outputs:
  #     output1: ${{ steps.step1.outputs.test }}
  #     output2: ${{ steps.step2.outputs.test }}
  #   steps:
  #     - id: step1
  #       run: echo "test=hello" >> "$GITHUB_OUTPUT"
  #     - id: step2
  #       run: echo "test=world" >> "$GITHUB_OUTPUT"
  # job2:
  #   runs-on: ubuntu-latest
  #   needs: job1
  #   steps:
  #     - env:
  #         OUTPUT1: ${{needs.job1.outputs.output1}}
  #         OUTPUT2: ${{needs.job1.outputs.output2}}
  #       run: echo "$OUTPUT1 $OUTPUT2"
